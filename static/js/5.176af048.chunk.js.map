{"version":3,"sources":["components/RightPane/SectionTable/CourseInfoBar.js","components/RightPane/SectionTable/OpenSpotAlertPopover.js","components/RightPane/SectionTable/SectionTableButtons.js","components/RightPane/SectionTable/SectionTableBody.js","components/RightPane/SectionTable/CourseInfoButton.js","components/RightPane/SectionTable/GradesPopup.js","components/RightPane/SectionTable/SectionTable.js"],"names":["noCourseInfo","title","prerequisite_text","prerequisite_for","description","ge_list","withStyles","rightSpace","marginRight","button","backgroundColor","boxShadow","courseInfoPane","margin","maxWidth","skeleton","width","height","props","courseTitle","courseNumber","deptCode","classes","analyticsCategory","useState","anchorEl","setAnchorEl","courseInfo","setCourseInfo","togglePopover","currentTarget","a","Boolean","courseId","encodeURIComponent","replace","fetch","PETERPORTAL_REST_ENDPOINT","response","ok","json","jsonResp","join","isMobileScreen","useMediaQuery","Button","variant","startIcon","size","onClick","event","logAnalytics","category","action","analyticsEnum","classSearch","actions","CLICK_INFO","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","className","Skeleton","animation","getPopoverContent","phoneNumberRegex","RegExp","OpenSpotAlertPopover","state","anchorElement","phoneNumber","window","localStorage","getItem","invalidInput","invalidInputMessage","handlePhoneNumberChange","setState","target","value","registerForAlerts","params","sectionCode","test","REGISTER_NOTIFICATIONS_ENDPOINT","method","headers","body","JSON","stringify","status","setItem","openSnackbar","prevProps","prevState","snapshot","this","RightPaneStore","toggleOpenSpotAlert","color","container","Typography","maskChar","mask","onChange","TextField","label","type","buttonContainer","PureComponent","theme","padding","spacing","display","justifyContent","marginTop","styles","ColorAndDelete","term","TableCell","style","flexDirection","IconButton","deleteCourse","AppStore","getCurrentScheduleIndex","ReactGA","addedClasses","DELETE_COURSE","Delete","fontSize","ColorPicker","isCustomEvent","ScheduleAddCell","section","courseDetails","scheduleNames","popupState","usePopupState","closeAndAddCourse","scheduleIndex","specificSchedule","close","meetings","time","ADD_SPECIFIC","addCourse","Add","bindTrigger","ArrowDropDown","Menu","bindMenu","map","name","index","MenuItem","key","length","popover","pointerEvents","cursor","isDarkMode","row","palette","hover","tr","cell","link","textDecoration","paper","waitl","full","Act","Col","Dis","Fld","Lab","Lec","Qiz","Res","Sem","Stu","Tap","Tut","NoPaddingTableCell","sizeSmall","CourseCodeCell","Tooltip","placement","enterDelay","clickToCopy","COPY_COURSE_CODE","SectionDetailsCell","sectionType","sectionNum","units","textAlign","InstructorsCell","instructors","profName","lastName","substring","indexOf","href","rel","LocationsCell","meeting","bldg","days","location_id","locations","split","undefined","SectionEnrollmentCell","numCurrentlyEnrolled","maxCapacity","numOnWaitlist","numNewOnlyReserved","totalEnrolled","RestrictionsCell","restrictions","bindHover","bindPopover","disableRestoreFocus","code","restrictionsMapping","DayAndTimeCell","timeString","StatusCell","getDefaultTerm","shortName","toLowerCase","SectionTableBody","colorAndDelete","highlightAdded","addedCourse","setAddedCourse","useEffect","toggleHighlight","doAdd","getAddedSectionCodes","has","on","removeListener","TableRow","root","classNames","text","icon","redirectLink","popupContent","analyticsAction","popupAnchor","setPopupAnchor","gpaTitle","fontWeight","marginLeft","loading","setLoading","graphTitle","setGraphTitle","gradeData","setGradeData","queryGrades","courseGrades","data","Object","entries","push","toUpperCase","all","average_gpa","toFixed","console","log","loadGrades","encodedDept","axisColor","strokeDasharray","dataKey","tick","fill","flex","alignItems","iconMargin","cellPadding","gap","prerequisiteLink","CLICK_PREREQUISITES","Assignment","CLICK_REVIEWS","RateReview","CLICK_ZOTISTICS","Assessment","CLICK_PAST_ENROLLMENT","TableContainer","component","Paper","elevation","Table","table","TableHead","Help","TableBody","sections"],"mappings":"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","file":"static/js/5.176af048.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Button, Popover, useMediaQuery } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { PETERPORTAL_REST_ENDPOINT } from '../../../api/endpoints';\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\n\nconst styles = () => ({\n    rightSpace: {\n        marginRight: 4,\n    },\n    button: {\n        backgroundColor: '#72a9ed',\n        boxShadow: 'none',\n    },\n    courseInfoPane: {\n        margin: 10,\n        maxWidth: 500,\n    },\n    skeleton: {\n        margin: 10,\n        width: 500,\n        height: 150,\n    },\n});\n\nconst noCourseInfo = {\n    title: 'No description available',\n    prerequisite_text: '',\n    prerequisite_for: '',\n    description: '',\n    ge_list: '',\n};\n\nconst CourseInfoBar = (props) => {\n    const { courseTitle, courseNumber, deptCode, classes, analyticsCategory } = props;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [courseInfo, setCourseInfo] = useState(null);\n\n    const togglePopover = async (currentTarget) => {\n        if (Boolean(anchorEl)) {\n            setAnchorEl(false);\n        } else {\n            setAnchorEl(currentTarget);\n\n            if (courseInfo === null) {\n                try {\n                    const courseId = encodeURIComponent(\n                        `${deptCode.replace(/\\s/g, '')}${courseNumber.replace(/\\s/g, '')}`\n                    );\n                    const response = await fetch(`${PETERPORTAL_REST_ENDPOINT}/courses/${courseId}`);\n\n                    if (response.ok) {\n                        const jsonResp = await response.json();\n\n                        setCourseInfo({\n                            title: jsonResp.title,\n                            prerequisite_text: jsonResp.prerequisite_text,\n                            prerequisite_for: jsonResp.prerequisite_for.join(', '),\n                            description: jsonResp.description,\n                            ge_list: jsonResp.ge_list.join(', '),\n                        });\n                    } else {\n                        setCourseInfo(noCourseInfo);\n                    }\n                } catch (e) {\n                    setCourseInfo(noCourseInfo);\n                }\n            }\n        }\n    };\n\n    const getPopoverContent = () => {\n        if (courseInfo === null) {\n            return (\n                <div className={classes.skeleton}>\n                    <p>\n                        <Skeleton variant=\"text\" animation=\"wave\" height={30} width=\"50%\" />\n                    </p>\n                    <p>\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                    </p>\n                </div>\n            );\n        } else {\n            const { title, description, prerequisite_text, prerequisite_for, ge_list } = courseInfo;\n\n            return (\n                <div className={classes.courseInfoPane}>\n                    <p>\n                        <strong>{title}</strong>\n                    </p>\n                    <p>{description}</p>\n                    {prerequisite_text !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>Prerequisites:</span>\n                            {prerequisite_text}\n                        </p>\n                    )}\n                    {prerequisite_for !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>Prerequisite for:</span>\n                            {prerequisite_for}\n                        </p>\n                    )}\n                    {ge_list !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>General Education Categories:</span>\n                            {ge_list}\n                        </p>\n                    )}\n                </div>\n            );\n        }\n    };\n\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                startIcon={!isMobileScreen && <InfoOutlinedIcon />}\n                size=\"small\"\n                onClick={(event) => {\n                    logAnalytics({\n                        category: analyticsCategory,\n                        action: analyticsEnum.classSearch.actions.CLICK_INFO,\n                    });\n                    const currentTarget = event.currentTarget;\n                    togglePopover(currentTarget);\n                }}\n            >\n                {`${deptCode} ${courseNumber} | ${courseTitle}`}\n            </Button>\n            <Popover\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={() => togglePopover(null)}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                {getPopoverContent()}\n            </Popover>\n        </>\n    );\n};\n\nCourseInfoBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n    courseTitle: PropTypes.string.isRequired,\n    courseNumber: PropTypes.string.isRequired,\n    deptCode: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(CourseInfoBar);\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputMask from 'react-input-mask';\nimport { Button, Popover, TextField, Typography } from '@material-ui/core';\nimport { openSnackbar } from '../../../actions/AppStoreActions';\nimport { REGISTER_NOTIFICATIONS_ENDPOINT } from '../../../api/endpoints';\nimport RightPaneStore from '../RightPaneStore';\n\nconst phoneNumberRegex = RegExp(/\\d{10}/);\n\nconst styles = (theme) => ({\n    container: {\n        padding: theme.spacing(),\n    },\n    buttonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: theme.spacing(),\n    },\n});\n\nclass OpenSpotAlertPopover extends PureComponent {\n    state = {\n        anchorElement: null,\n        phoneNumber: window.localStorage.getItem('phoneNumber') || '',\n        invalidInput: false,\n        invalidInputMessage: '',\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (\n            (!prevState.anchorElement && this.state.anchorElement) ||\n            (prevState.anchorElement && !this.state.anchorElement)\n        ) {\n            RightPaneStore.toggleOpenSpotAlert();\n        }\n    }\n\n    handlePhoneNumberChange = (event) => {\n        this.setState({ phoneNumber: event.target.value });\n    };\n\n    registerForAlerts = async () => {\n        const params = {\n            phoneNumber: this.state.phoneNumber.replace(/\\s/g, ''),\n            sectionCode: this.props.sectionCode,\n            courseTitle: `${this.props.courseNumber} ${this.props.courseTitle}`,\n        };\n\n        const validPhoneNumber = phoneNumberRegex.test(params.phoneNumber);\n\n        if (validPhoneNumber) {\n            const response = await fetch(REGISTER_NOTIFICATIONS_ENDPOINT, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(params),\n            });\n\n            if (response.status === 200) {\n                window.localStorage.setItem('phoneNumber', this.state.phoneNumber);\n                this.setState({ anchorElement: null, invalidInput: false });\n                openSnackbar('success', `Added to watch list for ${params.sectionCode}`);\n                //TODO: Dialog with the message about txt messages paywall etc etc\n            } else {\n                //TODO: Error state\n            }\n        } else {\n            this.setState({\n                invalidInput: true,\n                invalidInputMessage: 'Please enter a valid phone number',\n            });\n        }\n    };\n\n    render() {\n        const { classes, status } = this.props;\n\n        return (\n            <>\n                <Button\n                    variant=\"outlined\"\n                    color=\"inherit\"\n                    onClick={(event) => this.setState({ anchorElement: event.currentTarget })}\n                >\n                    {status}\n                </Button>\n                <Popover\n                    anchorEl={this.state.anchorElement}\n                    open={Boolean(this.state.anchorElement)}\n                    onClose={() =>\n                        this.setState({\n                            anchorElement: null,\n                            invalidInput: false,\n                        })\n                    }\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left',\n                    }}\n                    transformOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                    }}\n                >\n                    <div className={classes.container}>\n                        <Typography>Get notified when a spot opens!</Typography>\n                        {this.state.invalidInput ? <Typography>{this.state.invalidInputMessage}</Typography> : null}\n                        <div>\n                            <InputMask\n                                maskChar={null}\n                                mask=\"999 999 9999\"\n                                value={this.state.phoneNumber}\n                                onChange={this.handlePhoneNumberChange}\n                            >\n                                {() => <TextField label=\"Phone number\" margin=\"dense\" type=\"text\" />}\n                            </InputMask>\n                        </div>\n                        <div className={classes.buttonContainer}>\n                            <Button onClick={this.registerForAlerts} variant=\"outlined\" color=\"primary\">\n                                Notify me\n                            </Button>\n                        </div>\n                    </div>\n                </Popover>\n            </>\n        );\n    }\n}\n\nOpenSpotAlertPopover.propTypes = {\n    courseTitle: PropTypes.string.isRequired,\n    courseNumber: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    classes: PropTypes.object.isRequired,\n    sectionCode: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(OpenSpotAlertPopover);\n","import React from 'react';\nimport ColorPicker from '../../ColorPicker';\nimport { IconButton, Menu, MenuItem, TableCell, useMediaQuery } from '@material-ui/core';\nimport { deleteCourse, addCourse, openSnackbar } from '../../../actions/AppStoreActions';\nimport AppStore from '../../../stores/AppStore';\nimport { Delete, Add, ArrowDropDown } from '@material-ui/icons';\nimport { bindMenu, bindTrigger, usePopupState } from 'material-ui-popup-state/hooks';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport ReactGA from 'react-ga';\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\n\nconst styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'space-evenly',\n    },\n};\n\nexport const ColorAndDelete = withStyles(styles)((props) => {\n    const { sectionCode, color, classes, term } = props;\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <TableCell padding=\"none\">\n            <div className={classes.container} style={isMobileScreen ? { flexDirection: 'column' } : {}}>\n                <IconButton\n                    onClick={() => {\n                        deleteCourse(sectionCode, AppStore.getCurrentScheduleIndex(), term);\n                        ReactGA.event({\n                            category: 'antalmanac-rewrite',\n                            action: 'Click Delete Course',\n                            label: 'Added Course pane',\n                        });\n                        logAnalytics({\n                            category: analyticsEnum.addedClasses.title,\n                            action: analyticsEnum.addedClasses.actions.DELETE_COURSE,\n                        });\n                    }}\n                >\n                    <Delete fontSize=\"small\" />\n                </IconButton>\n                <ColorPicker\n                    color={color}\n                    isCustomEvent={false}\n                    sectionCode={sectionCode}\n                    term={term}\n                    analyticsCategory={analyticsEnum.addedClasses.title}\n                />\n            </div>\n        </TableCell>\n    );\n});\n\nexport const ScheduleAddCell = withStyles(styles)((props) => {\n    const { classes, section, courseDetails, term, scheduleNames } = props;\n    const popupState = usePopupState({ variant: 'popover' });\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    const closeAndAddCourse = (scheduleIndex, specificSchedule) => {\n        popupState.close();\n        for (const meeting of section.meetings) {\n            if (meeting.time === 'TBA') {\n                openSnackbar('success', 'Online/TBA class added');\n                // See Added Classes.\"\n                break;\n            }\n        }\n\n        if (scheduleIndex !== -1) {\n            if (specificSchedule) {\n                logAnalytics({\n                    category: analyticsEnum.classSearch.title,\n                    action: analyticsEnum.classSearch.actions.ADD_SPECIFIC,\n                });\n            }\n            section.color = addCourse(section, courseDetails, term, scheduleIndex);\n        }\n    };\n\n    return (\n        <TableCell padding=\"none\">\n            <div className={classes.container} style={isMobileScreen ? { flexDirection: 'column' } : {}}>\n                <IconButton onClick={() => closeAndAddCourse(AppStore.getCurrentScheduleIndex())}>\n                    <Add fontSize=\"small\" />\n                </IconButton>\n                <IconButton {...bindTrigger(popupState)}>\n                    <ArrowDropDown fontSize=\"small\" />\n                </IconButton>\n                <Menu {...bindMenu(popupState)} onClose={() => closeAndAddCourse(-1)}>\n                    {scheduleNames.map((name, index) => (\n                        <MenuItem key={index} onClick={() => closeAndAddCourse(index, true)}>\n                            Add to {name}\n                        </MenuItem>\n                    ))}\n                    <MenuItem onClick={() => closeAndAddCourse(scheduleNames.length, true)}>\n                        Add to All Schedules\n                    </MenuItem>\n                </Menu>\n            </div>\n        </TableCell>\n    );\n});\n","import React, { Fragment, useEffect, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport locations from './static/locations';\nimport restrictionsMapping from './static/restrictionsMapping';\nimport { TableRow, Popover, Tooltip, Typography, TableCell, useMediaQuery } from '@material-ui/core';\nimport { bindHover, bindPopover, usePopupState } from 'material-ui-popup-state/hooks';\nimport { withStyles } from '@material-ui/core/styles';\nimport OpenSpotAlertPopover from './OpenSpotAlertPopover';\nimport PropTypes from 'prop-types';\nimport AppStore from '../../../stores/AppStore';\nimport { ColorAndDelete, ScheduleAddCell } from './SectionTableButtons';\nimport classNames from 'classnames';\nimport { clickToCopy, isDarkMode } from '../../../helpers';\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\nimport { getDefaultTerm } from '../../../termData';\n\nconst styles = (theme) => ({\n    popover: {\n        pointerEvents: 'none',\n    },\n    sectionCode: {\n        display: 'inline-block',\n        cursor: 'pointer',\n        '&:hover': {\n            color: isDarkMode() ? 'gold' : 'blueviolet',\n            cursor: 'pointer',\n        },\n    },\n    row: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    tr: {\n        '&.addedCourse': {\n            backgroundColor: isDarkMode() ? '#b0b04f' : '#fcfc97',\n        },\n    },\n    cell: {\n        fontSize: '0.85rem',\n    },\n    link: {\n        textDecoration: 'underline',\n        color: isDarkMode() ? 'dodgerblue' : 'blue',\n        cursor: 'pointer',\n    },\n    paper: {\n        padding: theme.spacing(),\n    },\n    button: { padding: '6px' },\n    open: {\n        color: '#00c853',\n    },\n    waitl: {\n        color: '#1c44b2',\n    },\n    full: {\n        color: '#e53935',\n    },\n    Act: { color: '#c87137' },\n    Col: { color: '#ff40b5' },\n    Dis: { color: '#8d63f0' },\n    Fld: { color: '#1ac805' },\n    Lab: { color: '#1abbe9' },\n    Lec: { color: '#d40000' },\n    Qiz: { color: '#8e5c41' },\n    Res: { color: '#ff2466' },\n    Sem: { color: '#2155ff' },\n    Stu: { color: '#179523' },\n    Tap: { color: '#8d2df0' },\n    Tut: { color: '#ffc705' },\n});\n\nconst NoPaddingTableCell = withStyles({\n    sizeSmall: { padding: '0px 0px 0px 0px' },\n})(TableCell);\n\nconst CourseCodeCell = withStyles(styles)((props) => {\n    const { classes, sectionCode } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <Tooltip title=\"Click to copy course code\" placement=\"bottom\" enterDelay={300}>\n                <div\n                    onClick={(event) => {\n                        clickToCopy(event, sectionCode);\n                        ReactGA.event({\n                            category: 'antalmanac-rewrite',\n                            action: `Click section code`,\n                        });\n                        logAnalytics({\n                            category: analyticsEnum.classSearch.title,\n                            action: analyticsEnum.classSearch.actions.COPY_COURSE_CODE,\n                        });\n                    }}\n                    className={classes.sectionCode}\n                >\n                    {sectionCode}\n                </div>\n            </Tooltip>\n        </NoPaddingTableCell>\n    );\n});\n\nconst SectionDetailsCell = withStyles(styles)((props) => {\n    const { classes, sectionType, sectionNum, units } = props;\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <NoPaddingTableCell className={classes.cell} style={isMobileScreen ? { textAlign: 'center' } : {}}>\n            <div className={classes[sectionType]}>{sectionType}</div>\n            <div>\n                {!isMobileScreen && <>Sec: </>}\n                {sectionNum}\n            </div>\n            <div>\n                {!isMobileScreen && <>Units: </>}\n                {units}\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\nconst InstructorsCell = withStyles(styles)((props) => {\n    const { classes, instructors } = props;\n\n    const getLinks = (professorNames) => {\n        return professorNames.map((profName) => {\n            if (profName !== 'STAFF') {\n                const lastName = profName.substring(0, profName.indexOf(','));\n                return (\n                    <div key={profName}>\n                        <a\n                            href={`https://www.ratemyprofessors.com/search/teachers?sid=U2Nob29sLTEwNzQ=&query=${lastName}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            onClick={() => {\n                                ReactGA.event({\n                                    category: 'antalmanac-rewrite',\n                                    action: `Click instructor name`,\n                                    label: `RateMyProfessors`,\n                                });\n                            }}\n                        >\n                            {profName}\n                        </a>\n                    </div>\n                );\n            } else {\n                return profName;\n            }\n        });\n    };\n\n    return <NoPaddingTableCell className={classes.cell}>{getLinks(instructors)}</NoPaddingTableCell>;\n});\n\nconst LocationsCell = withStyles(styles)((props) => {\n    const { classes, meetings } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            {meetings.map((meeting) => {\n                return meeting.bldg !== 'TBA' ? (\n                    <Fragment key={meeting.days + meeting.time + meeting.bldg}>\n                        <a\n                            href={(() => {\n                                const location_id = locations[meeting.bldg.split(' ')[0]];\n                                if (location_id !== undefined) return 'https://map.uci.edu/?id=463#!m/' + location_id;\n                                else return 'https://map.uci.edu/?id=463#!ct/12035,12033,11888,0,12034';\n                            })()}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {meeting.bldg}\n                        </a>\n                        <br />\n                    </Fragment>\n                ) : (\n                    <div>{meeting.bldg}</div>\n                );\n            })}\n        </NoPaddingTableCell>\n    );\n});\n\nconst SectionEnrollmentCell = withStyles(styles)((props) => {\n    const { classes, numCurrentlyEnrolled, maxCapacity, numOnWaitlist, numNewOnlyReserved } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <div>\n                <div>\n                    <strong>\n                        {numCurrentlyEnrolled.totalEnrolled} / {maxCapacity}\n                    </strong>\n                </div>\n                {numOnWaitlist && <div>WL: {numOnWaitlist}</div>}\n                {numNewOnlyReserved && <div>NOR: {numNewOnlyReserved}</div>}\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\nconst RestrictionsCell = withStyles(styles)((props) => {\n    const parseRestrictions = (restrictionCode) => {\n        return restrictionCode.split(' ').map((code, index) => {\n            if (code !== 'and' && code !== 'or') {\n                return (\n                    <Fragment key={index}>\n                        {restrictionsMapping[code]}\n                        <br />\n                    </Fragment>\n                );\n            }\n            return null;\n        });\n    };\n\n    const { classes, restrictions } = props;\n    const popupState = usePopupState({ variant: 'popover' });\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <div>\n                <Typography {...bindHover(popupState)}>\n                    <a\n                        href=\"https://www.reg.uci.edu/enrollment/restrict_codes.html\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {restrictions}\n                    </a>\n                </Typography>\n                <Popover\n                    {...bindPopover(popupState)}\n                    className={classes.popover}\n                    classes={{ paper: classes.paper }}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n                    transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n                    disableRestoreFocus\n                >\n                    <Typography>{parseRestrictions(restrictions)}</Typography>\n                </Popover>\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\nconst DayAndTimeCell = withStyles(styles)((props) => {\n    const { classes, meetings } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            {meetings.map((meeting) => {\n                const timeString = meeting.time.replace(/\\s/g, '').split('-').join(' - ');\n                return <div key={meeting.days + meeting.time + meeting.bldg}>{`${meeting.days} ${timeString}`}</div>;\n            })}\n        </NoPaddingTableCell>\n    );\n});\n\nconst StatusCell = withStyles(styles)((props) => {\n    const { sectionCode, term, courseTitle, courseNumber, status, classes } = props;\n\n    if (term === getDefaultTerm().shortName && (status === 'NewOnly' || status === 'FULL')) {\n        return (\n            <NoPaddingTableCell className={`${classes[status.toLowerCase()]} ${classes.cell}`}>\n                <OpenSpotAlertPopover\n                    courseTitle={courseTitle}\n                    courseNumber={courseNumber}\n                    status={status}\n                    sectionCode={sectionCode}\n                />\n            </NoPaddingTableCell>\n        );\n    } else {\n        return (\n            <NoPaddingTableCell className={`${classes[status.toLowerCase()]} ${classes.cell}`}>\n                {status}\n            </NoPaddingTableCell>\n        );\n    }\n});\n//TODO: SectionNum name parity -> SectionNumber\nconst SectionTableBody = withStyles(styles)((props) => {\n    const { classes, section, courseDetails, term, colorAndDelete, highlightAdded, scheduleNames } = props;\n    const [addedCourse, setAddedCourse] = useState(colorAndDelete);\n    useEffect(() => {\n        const toggleHighlight = () => {\n            const doAdd = AppStore.getAddedSectionCodes()[AppStore.getCurrentScheduleIndex()].has(\n                `${section.sectionCode} ${term}`\n            );\n            setAddedCourse(doAdd);\n        };\n\n        toggleHighlight();\n        AppStore.on('addedCoursesChange', toggleHighlight);\n        AppStore.on('currentScheduleIndexChange', toggleHighlight);\n\n        return () => {\n            AppStore.removeListener('addedCoursesChange', toggleHighlight);\n            AppStore.removeListener('currentScheduleIndexChange', toggleHighlight);\n        };\n    }, [section.sectionCode, term]); //should only run once on first render since these shouldn't change.\n\n    return (\n        <TableRow\n            classes={{ root: classes.row }}\n            className={classNames(classes.tr, { addedCourse: addedCourse && highlightAdded })}\n        >\n            {!addedCourse ? (\n                <ScheduleAddCell\n                    section={section}\n                    courseDetails={courseDetails}\n                    term={term}\n                    scheduleNames={scheduleNames}\n                />\n            ) : (\n                <ColorAndDelete color={section.color} sectionCode={section.sectionCode} term={term} />\n            )}\n            <CourseCodeCell sectionCode={section.sectionCode} />\n            <SectionDetailsCell\n                sectionType={section.sectionType}\n                sectionNum={section.sectionNum}\n                units={section.units}\n            />\n            <InstructorsCell instructors={section.instructors} />\n            <DayAndTimeCell meetings={section.meetings} />\n            <LocationsCell meetings={section.meetings} />\n            <SectionEnrollmentCell\n                numCurrentlyEnrolled={section.numCurrentlyEnrolled}\n                maxCapacity={section.maxCapacity}\n                numOnWaitlist={section.numOnWaitlist}\n                numNewOnlyReserved={section.numNewOnlyReserved}\n            />\n            <RestrictionsCell restrictions={section.restrictions} />\n            <StatusCell\n                term={term}\n                status={section.status}\n                sectionCode={section.sectionCode}\n                courseTitle={courseDetails.courseTitle}\n                courseNumber={courseDetails.courseNumber}\n            />\n        </TableRow>\n    );\n});\n\nSectionTableBody.propTypes = {\n    classes: PropTypes.object.isRequired,\n    section: PropTypes.object.isRequired,\n    courseDetails: PropTypes.object.isRequired,\n    term: PropTypes.string.isRequired,\n    colorAndDelete: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(SectionTableBody);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover } from '@material-ui/core';\nimport { useMediaQuery } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { logAnalytics } from '../../../analytics';\n\nconst styles = {\n    button: {\n        backgroundColor: '#385EB1',\n        color: '#fff',\n    },\n};\n\nfunction CourseInfoButton({ classes, text, icon, redirectLink, popupContent, analyticsAction, analyticsCategory }) {\n    const [popupAnchor, setPopupAnchor] = useState(null);\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n    return (\n        <>\n            <Button\n                className={classes.button}\n                startIcon={!isMobileScreen && icon}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={(event) => {\n                    logAnalytics({\n                        category: analyticsCategory,\n                        action: analyticsAction,\n                    });\n\n                    if (redirectLink) {\n                        window.open(redirectLink);\n                    }\n\n                    if (popupContent) {\n                        setPopupAnchor(event.currentTarget);\n                    }\n                }}\n            >\n                {text}\n            </Button>\n\n            {popupContent && (\n                <Popover\n                    anchorEl={popupAnchor}\n                    open={Boolean(popupAnchor)}\n                    onClose={() => setPopupAnchor(null)}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    {popupContent}\n                </Popover>\n            )}\n        </>\n    );\n}\n\nCourseInfoButton.propTypes = {\n    text: PropTypes.string,\n    icon: PropTypes.object,\n    redirectLink: PropTypes.string,\n    analyticsAction: PropTypes.string,\n    analyticsCategory: PropTypes.string,\n};\n\nexport default withStyles(styles)(CourseInfoButton);\n","import React, { useState } from 'react';\nimport { Skeleton } from '@material-ui/lab';\nimport { withStyles } from '@material-ui/core/styles';\nimport { XAxis, YAxis, CartesianGrid, BarChart, Bar, ResponsiveContainer } from 'recharts';\nimport { queryGrades, isDarkMode } from '../../../helpers';\n\nconst styles = {\n    button: {\n        backgroundColor: '#385EB1',\n        color: '#fff',\n    },\n    gpaTitle: {\n        marginTop: '.5rem',\n        textAlign: 'center',\n        fontWeight: 500,\n        fontSize: '1.2rem',\n        marginRight: '4rem',\n        marginLeft: '4rem',\n    },\n    skeleton: {\n        padding: '4px',\n    },\n};\n\nconst GradesPopup = ({ deptCode, courseNumber, classes, isMobileScreen }) => {\n    const [loading, setLoading] = useState(true);\n    const [graphTitle, setGraphTitle] = useState(null);\n    const [gradeData, setGradeData] = useState(null);\n\n    const loadGrades = async () => {\n        if (loading === false) {\n            return;\n        }\n\n        try {\n            let courseGrades = await queryGrades(deptCode, courseNumber);\n\n            let data = [];\n            for (const [key, value] of Object.entries(courseGrades)) {\n                // format data for display in chart\n                // key formatting: sum_grade_a_count -> A\n                if (key !== 'average_gpa') {\n                    data.push({ name: key.split('_')[2]?.toUpperCase(), all: value });\n                }\n            }\n\n            setGraphTitle(`Grade Distribution | Average GPA: ${courseGrades.average_gpa.toFixed(2)}`);\n            setGradeData(data);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n            setLoading(false);\n            setGraphTitle('Grades are not available for this class.');\n        }\n    };\n\n    const width = isMobileScreen ? 300 : 500;\n    const height = isMobileScreen ? 200 : 300;\n\n    loadGrades();\n\n    if (loading) {\n        return (\n            <div className={classes.skeleton}>\n                <p>\n                    <Skeleton variant=\"text\" animation=\"wave\" height={height} width={width} />\n                </p>\n            </div>\n        );\n    } else {\n        const encodedDept = encodeURIComponent(deptCode);\n        const axisColor = isDarkMode() ? '#fff' : '#111';\n\n        return (\n            <div style={{ marginTop: '5px' }}>\n                <div className={classes.gpaTitle}>{graphTitle}</div>\n                {gradeData && (\n                    <ResponsiveContainer width={width} height={height}>\n                        <BarChart data={gradeData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" tick={{ fontSize: 12, fill: axisColor }} />\n                            <YAxis tick={{ fontSize: 12, fill: axisColor }} width={40} />\n                            <Bar dataKey=\"all\" fill=\"#5182ed\" />\n                        </BarChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{ margin: '5px', textAlign: 'center' }}>\n                    <a\n                        href={`https://zotistics.com/?&selectQuarter=&selectYear=&selectDep=${encodedDept}&classNum=${courseNumber}&code=&submit=Submit`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        View on Zotistics\n                    </a>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default withStyles(styles)(GradesPopup);\n","import React from 'react';\nimport {\n    Paper,\n    Typography,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Tooltip,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n// import AlmanacGraph from '../EnrollmentGraph/EnrollmentGraph'; uncomment when we get past enrollment data back\nimport CourseInfoBar from './CourseInfoBar';\nimport SectionTableBody from './SectionTableBody';\nimport CourseInfoButton from './CourseInfoButton';\nimport { Help, Assessment, Assignment, RateReview } from '@material-ui/icons';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport PropTypes from 'prop-types';\nimport analyticsEnum from '../../../analytics';\nimport GradesPopup from './GradesPopup';\n\nconst styles = {\n    flex: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    iconMargin: {\n        marginRight: '4px',\n    },\n    cellPadding: {\n        padding: '0px 0px 0px 0px',\n    },\n    row: {\n        '&:nth-child(1)': {\n            width: '8%',\n        },\n        '&:nth-child(2)': {\n            width: '8%',\n        },\n        '&:nth-child(3)': {\n            width: '8%',\n        },\n        '&:nth-child(4)': {\n            width: '15%',\n        },\n        '&:nth-child(5)': {\n            width: '12%',\n        },\n        '&:nth-child(6)': {\n            width: '10%',\n        },\n        '&:nth-child(7)': {\n            width: '10%',\n        },\n        '&:nth-child(8)': {\n            width: '8%',\n        },\n        '&:nth-child(9)': {\n            width: '8%',\n        },\n    },\n};\n\nconst SectionTable = (props) => {\n    const { classes, courseDetails, term, colorAndDelete, highlightAdded, scheduleNames, analyticsCategory } = props;\n    const encodedDept = encodeURIComponent(courseDetails.deptCode);\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <>\n            <div\n                style={{\n                    display: 'inline-flex',\n                    gap: '4px',\n                    marginTop: '4px',\n                }}\n            >\n                <CourseInfoBar\n                    deptCode={courseDetails.deptCode}\n                    courseTitle={courseDetails.courseTitle}\n                    courseNumber={courseDetails.courseNumber}\n                    analyticsCategory={analyticsCategory}\n                />\n\n                {/* Temporarily remove \"Past Enrollment\" until data on PeterPortal API */}\n                {/* <AlmanacGraph courseDetails={courseDetails} />  */}\n\n                {courseDetails.prerequisiteLink && (\n                    <CourseInfoButton\n                        analyticsCategory={analyticsCategory}\n                        analyticsAction={analyticsEnum.classSearch.actions.CLICK_PREREQUISITES}\n                        text={isMobileScreen ? 'Prereqs' : 'Prerequisites'}\n                        icon={<Assignment />}\n                        redirectLink={courseDetails.prerequisiteLink}\n                    />\n                )}\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_REVIEWS}\n                    text=\"Reviews\"\n                    icon={<RateReview />}\n                    redirectLink={`https://peterportal.org/course/${encodedDept}${courseDetails.courseNumber}`}\n                />\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_ZOTISTICS}\n                    text=\"Zotistics\"\n                    icon={<Assessment />}\n                    popupContent={\n                        <GradesPopup\n                            deptCode={courseDetails.deptCode}\n                            courseNumber={courseDetails.courseNumber}\n                            isMobileScreen={isMobileScreen}\n                        />\n                    }\n                />\n\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_PAST_ENROLLMENT}\n                    text=\"Past Enrollment\"\n                    icon={<ShowChartIcon />}\n                    redirectLink={`https://zot-tracker.herokuapp.com/?dept=${encodedDept}&number=${courseDetails.courseNumber}&courseType=all`}\n                />\n            </div>\n\n            <TableContainer component={Paper} style={{ margin: '8px 0px 8px 0px' }} elevation={0} variant=\"outlined\">\n                <Table className={classes.table} size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row} />\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Code\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Type\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Instructors\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Times\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Places\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                <div className={classes.flex}>\n                                    <span className={classes.iconMargin}>Enrollment</span>\n                                    {!isMobileScreen && (\n                                        <Tooltip\n                                            title={\n                                                <Typography>\n                                                    Enrolled/Capacity\n                                                    <br />\n                                                    Waitlist\n                                                    <br />\n                                                    New-Only Reserved\n                                                </Typography>\n                                            }\n                                        >\n                                            <Help fontSize=\"small\" />\n                                        </Tooltip>\n                                    )}\n                                </div>\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Rstr\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes.cellPadding }} className={classes.row}>\n                                Status\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {courseDetails.sections.map((section) => {\n                            return (\n                                <SectionTableBody\n                                    key={section.sectionCode}\n                                    section={section}\n                                    courseDetails={courseDetails}\n                                    term={term}\n                                    colorAndDelete={colorAndDelete}\n                                    highlightAdded={highlightAdded}\n                                    scheduleNames={scheduleNames}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nSectionTable.propTypes = {\n    courseDetails: PropTypes.object.isRequired,\n    term: PropTypes.string.isRequired,\n    colorAndDelete: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(SectionTable);\n"],"sourceRoot":""}