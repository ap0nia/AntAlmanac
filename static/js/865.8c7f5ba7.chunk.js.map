{"version":3,"file":"static/js/865.8c7f5ba7.chunk.js","mappings":"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","sources":["components/RightPane/SectionTable/CourseInfoBar.tsx","components/RightPane/SectionTable/CourseInfoButton.tsx","components/RightPane/SectionTable/GradesPopup.tsx","components/RightPane/SectionTable/OpenSpotAlertPopover.tsx","components/RightPane/SectionTable/SectionTableButtons.tsx","components/RightPane/SectionTable/SectionTableBody.tsx","components/RightPane/SectionTable/SectionTable.tsx"],"sourcesContent":["import { Button, Popover, useMediaQuery } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { Skeleton } from '@material-ui/lab';\nimport React, { useState } from 'react';\n\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\nimport { PETERPORTAL_REST_ENDPOINT } from '../../../api/endpoints';\nimport { CourseResponse } from '../../../peterportal.types';\n\nconst styles = () => ({\n    rightSpace: {\n        marginRight: 4,\n    },\n    button: {\n        backgroundColor: '#72a9ed',\n        boxShadow: 'none',\n    },\n    courseInfoPane: {\n        margin: 10,\n        maxWidth: 500,\n    },\n    skeleton: {\n        margin: 10,\n        width: 500,\n        height: 150,\n    },\n});\n\nconst noCourseInfo = {\n    title: 'No description available',\n    prerequisite_text: '',\n    prerequisite_for: '',\n    description: '',\n    ge_list: '',\n};\n\ninterface CourseInfoBarProps {\n    courseTitle: string;\n    courseNumber: string;\n    deptCode: string;\n    classes: ClassNameMap;\n    analyticsCategory: string;\n}\n\ninterface CourseInfo {\n    title: string;\n    prerequisite_text: string;\n    prerequisite_for: string;\n    description: string;\n    ge_list: string;\n}\n\nconst CourseInfoBar = (props: CourseInfoBarProps) => {\n    const { courseTitle, courseNumber, deptCode, classes, analyticsCategory } = props;\n\n    const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n    const [courseInfo, setCourseInfo] = useState<CourseInfo | null>(null);\n\n    const togglePopover = async (currentTarget: HTMLElement | null) => {\n        if (anchorEl) {\n            setAnchorEl(null);\n        } else {\n            setAnchorEl(currentTarget);\n\n            if (courseInfo === null) {\n                try {\n                    const courseId = encodeURIComponent(\n                        `${deptCode.replace(/\\s/g, '')}${courseNumber.replace(/\\s/g, '')}`\n                    );\n                    const response = await fetch(`${PETERPORTAL_REST_ENDPOINT}/courses/${courseId}`);\n\n                    if (response.ok) {\n                        const jsonResp = await response.json() as CourseResponse;\n\n                        setCourseInfo({\n                            title: jsonResp.title,\n                            prerequisite_text: jsonResp.prerequisite_text,\n                            prerequisite_for: jsonResp.prerequisite_for.join(', '),\n                            description: jsonResp.description,\n                            ge_list: jsonResp.ge_list.join(', '),\n                        });\n                    } else {\n                        setCourseInfo(noCourseInfo);\n                    }\n                } catch (e) {\n                    setCourseInfo(noCourseInfo);\n                }\n            }\n        }\n    };\n\n    const getPopoverContent = () => {\n        if (courseInfo === null) {\n            return (\n                <div className={classes.skeleton}>\n                    <p>\n                        <Skeleton variant=\"text\" animation=\"wave\" height={30} width=\"50%\" />\n                    </p>\n                    <p>\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                        <Skeleton variant=\"text\" animation=\"wave\" />\n                    </p>\n                </div>\n            );\n        } else {\n            const { title, description, prerequisite_text, prerequisite_for, ge_list } = courseInfo;\n\n            return (\n                <div className={classes.courseInfoPane}>\n                    <p>\n                        <strong>{title}</strong>\n                    </p>\n                    <p>{description}</p>\n                    {prerequisite_text !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>Prerequisites:</span>\n                            {prerequisite_text}\n                        </p>\n                    )}\n                    {prerequisite_for !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>Prerequisite for:</span>\n                            {prerequisite_for}\n                        </p>\n                    )}\n                    {ge_list !== '' && (\n                        <p>\n                            <span className={classes.rightSpace}>General Education Categories:</span>\n                            {ge_list}\n                        </p>\n                    )}\n                </div>\n            );\n        }\n    };\n\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                startIcon={!isMobileScreen && <InfoOutlinedIcon />}\n                size=\"small\"\n                onClick={(event) => {\n                    logAnalytics({\n                        category: analyticsCategory,\n                        action: analyticsEnum.classSearch.actions.CLICK_INFO,\n                    });\n                    const currentTarget = event.currentTarget;\n                    void togglePopover(currentTarget);\n                }}\n            >\n                {`${deptCode} ${courseNumber} | ${courseTitle}`}\n            </Button>\n            <Popover\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={() => togglePopover(null)}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                {getPopoverContent()}\n            </Popover>\n        </>\n    );\n};\n\nexport default withStyles(styles)(CourseInfoBar);\n","import { Button, Popover , useMediaQuery } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport React, { useState } from 'react';\n\nimport { logAnalytics } from '../../../analytics';\n\nconst styles = {\n    button: {\n        backgroundColor: '#385EB1',\n        color: '#fff',\n    },\n};\n\ninterface CourseInfoButtonProps {\n    classes: ClassNameMap;\n    text: string;\n    icon: React.ReactElement;\n    redirectLink?: string;\n    popupContent?: React.ReactElement;\n    analyticsAction: string;\n    analyticsCategory: string;\n}\n\nfunction CourseInfoButton({\n    classes,\n    text,\n    icon,\n    redirectLink,\n    popupContent,\n    analyticsAction,\n    analyticsCategory,\n}: CourseInfoButtonProps) {\n    const [popupAnchor, setPopupAnchor] = useState<HTMLElement | null>(null);\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n    return (\n        <>\n            <Button\n                className={classes.button}\n                startIcon={!isMobileScreen && icon}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={(event: React.MouseEvent<HTMLElement>) => {\n                    logAnalytics({\n                        category: analyticsCategory,\n                        action: analyticsAction,\n                    });\n\n                    if (redirectLink) {\n                        window.open(redirectLink);\n                    }\n\n                    if (popupContent) {\n                        setPopupAnchor(event.currentTarget);\n                    }\n                }}\n            >\n                {text}\n            </Button>\n\n            {popupContent && (\n                <Popover\n                    anchorEl={popupAnchor}\n                    open={Boolean(popupAnchor)}\n                    onClose={() => setPopupAnchor(null)}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    {popupContent}\n                </Popover>\n            )}\n        </>\n    );\n}\n\nexport default withStyles(styles)(CourseInfoButton);\n","import { Theme } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap, Styles } from '@material-ui/core/styles/withStyles';\nimport { Skeleton } from '@material-ui/lab';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer,XAxis, YAxis } from 'recharts';\n\nimport { isDarkMode,queryGrades } from '../../../helpers';\n\nconst styles: Styles<Theme, object> = {\n    button: {\n        backgroundColor: '#385EB1',\n        color: '#fff',\n    },\n    gpaTitle: {\n        marginTop: '.5rem',\n        textAlign: 'center',\n        fontWeight: 500,\n        fontSize: '1.2rem',\n        marginRight: '4rem',\n        marginLeft: '4rem',\n    },\n    skeleton: {\n        padding: '4px',\n    },\n};\n\ninterface GradesPopupProps {\n    deptCode: string;\n    courseNumber: string;\n    classes: ClassNameMap;\n    isMobileScreen: boolean;\n}\n\ninterface GradeData {\n    name: string;\n    all: number\n}\n\nconst GradesPopup = ({ deptCode, courseNumber, classes, isMobileScreen }: GradesPopupProps) => {\n    const [loading, setLoading] = useState(true);\n    const [graphTitle, setGraphTitle] = useState<string | null>(null);\n    const [gradeData, setGradeData] = useState<GradeData[] | null>(null);\n\n    const loadGrades = async () => {\n        if (loading === false) {\n            return;\n        }\n\n        try {\n            const courseGrades = await queryGrades(deptCode, courseNumber);\n\n            const data = [];\n            for (const [key, value] of Object.entries(courseGrades)) {\n                // format data for display in chart\n                // key formatting: sum_grade_a_count -> A\n                if (key !== 'average_gpa') {\n                    data.push({ name: key.split('_')[2]?.toUpperCase(), all: value as number });\n                }\n            }\n\n            setGraphTitle(`Grade Distribution | Average GPA: ${courseGrades.average_gpa.toFixed(2)}`);\n            setGradeData(data);\n            setLoading(false);\n        } catch (e) {\n            console.log(e);\n            setLoading(false);\n            setGraphTitle('Grades are not available for this class.');\n        }\n    };\n\n    const width = isMobileScreen ? 300 : 500;\n    const height = isMobileScreen ? 200 : 300;\n\n    void loadGrades();\n\n    if (loading) {\n        return (\n            <div className={classes.skeleton}>\n                <p>\n                    <Skeleton variant=\"text\" animation=\"wave\" height={height} width={width} />\n                </p>\n            </div>\n        );\n    } else {\n        const encodedDept = encodeURIComponent(deptCode);\n        const axisColor = isDarkMode() ? '#fff' : '#111';\n\n        return (\n            <div style={{ marginTop: '5px' }}>\n                <div className={classes.gpaTitle}>{graphTitle}</div>\n                {gradeData && (\n                    <ResponsiveContainer width={width} height={height}>\n                        <BarChart data={gradeData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" tick={{ fontSize: 12, fill: axisColor }} />\n                            <YAxis tick={{ fontSize: 12, fill: axisColor }} width={40} />\n                            <Bar dataKey=\"all\" fill=\"#5182ed\" />\n                        </BarChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{ margin: '5px', textAlign: 'center' }}>\n                    <a\n                        href={`https://zotistics.com/?&selectQuarter=&selectYear=&selectDep=${encodedDept}&classNum=${courseNumber}&code=&submit=Submit`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        View on Zotistics\n                    </a>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default withStyles(styles)(GradesPopup);\n","import { Button, Popover, TextField, Typography } from '@material-ui/core';\nimport { Theme,withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap,Styles } from '@material-ui/core/styles/withStyles';\nimport React, { PureComponent } from 'react';\nimport InputMask from 'react-input-mask';\n\nimport { openSnackbar } from '../../../actions/AppStoreActions';\nimport { REGISTER_NOTIFICATIONS_ENDPOINT } from '../../../api/endpoints';\nimport RightPaneStore from '../RightPaneStore';\n\nconst phoneNumberRegex = RegExp(/\\d{10}/);\n\nconst styles: Styles<Theme, object> = (theme) => ({\n    container: {\n        padding: theme.spacing(),\n    },\n    buttonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: theme.spacing(),\n    },\n});\n\nexport interface OpenSpotAlertPopoverProps {\n    classes: ClassNameMap;\n    status: string;\n    sectionCode: string;\n    courseNumber: string;\n    courseTitle: string;\n}\n\ninterface OpenSpotAlertPopoverState {\n    anchorElement: HTMLElement | null;\n    phoneNumber: string;\n    invalidInput: boolean;\n    invalidInputMessage: string;\n}\n\nclass OpenSpotAlertPopover extends PureComponent<OpenSpotAlertPopoverProps, OpenSpotAlertPopoverState> {\n    state = {\n        anchorElement: null,\n        phoneNumber: window.localStorage.getItem('phoneNumber') || '',\n        invalidInput: false,\n        invalidInputMessage: '',\n    };\n\n    componentDidUpdate(prevProps: OpenSpotAlertPopoverProps, prevState: OpenSpotAlertPopoverState) {\n        if (\n            (!prevState.anchorElement && this.state.anchorElement) ||\n            (prevState.anchorElement && !this.state.anchorElement)\n        ) {\n            RightPaneStore.toggleOpenSpotAlert();\n        }\n    }\n\n    handlePhoneNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ phoneNumber: event.target.value });\n    };\n\n    registerForAlerts = async () => {\n        const params = {\n            phoneNumber: this.state.phoneNumber.replace(/\\s/g, ''),\n            sectionCode: this.props.sectionCode,\n            courseTitle: `${this.props.courseNumber} ${this.props.courseTitle}`,\n        };\n\n        const validPhoneNumber = phoneNumberRegex.test(params.phoneNumber);\n\n        if (validPhoneNumber) {\n            const response = await fetch(REGISTER_NOTIFICATIONS_ENDPOINT, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(params),\n            });\n\n            if (response.status === 200) {\n                window.localStorage.setItem('phoneNumber', this.state.phoneNumber);\n                this.setState({ anchorElement: null, invalidInput: false });\n                openSnackbar('success', `Added to watch list for ${params.sectionCode}`);\n                //TODO: Dialog with the message about txt messages paywall etc etc\n            } else {\n                //TODO: Error state\n            }\n        } else {\n            this.setState({\n                invalidInput: true,\n                invalidInputMessage: 'Please enter a valid phone number',\n            });\n        }\n    };\n\n    render() {\n        const { classes, status } = this.props;\n\n        return (\n            <>\n                <Button\n                    variant=\"outlined\"\n                    color=\"inherit\"\n                    onClick={(event) => this.setState({ anchorElement: event.currentTarget })}\n                >\n                    {status}\n                </Button>\n                <Popover\n                    anchorEl={this.state.anchorElement}\n                    open={Boolean(this.state.anchorElement)}\n                    onClose={() =>\n                        this.setState({\n                            anchorElement: null,\n                            invalidInput: false,\n                        })\n                    }\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left',\n                    }}\n                    transformOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                    }}\n                >\n                    <div className={classes.container}>\n                        <Typography>Get notified when a spot opens!</Typography>\n                        {this.state.invalidInput ? <Typography>{this.state.invalidInputMessage}</Typography> : null}\n                        <div>\n                            <InputMask\n                                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                                /* @ts-ignore The type interface for this library uses \"maskPlaceholder\" while the library itself uses \"maskChar\"*/\n                                maskChar={null}\n                                mask=\"999 999 9999\"\n                                value={this.state.phoneNumber}\n                                onChange={this.handlePhoneNumberChange}\n                            >\n                                {() => <TextField label=\"Phone number\" margin=\"dense\" type=\"text\" />}\n                            </InputMask>\n                        </div>\n                        <div className={classes.buttonContainer}>\n                            <Button onClick={this.registerForAlerts} variant=\"outlined\" color=\"primary\">\n                                Notify me\n                            </Button>\n                        </div>\n                    </div>\n                </Popover>\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles)(OpenSpotAlertPopover);\n","import { IconButton, Menu, MenuItem, TableCell, useMediaQuery } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport { Add, ArrowDropDown,Delete } from '@material-ui/icons';\nimport { bindMenu, bindTrigger, usePopupState } from 'material-ui-popup-state/hooks';\nimport React from 'react';\n\nimport { addCourse, deleteCourse, openSnackbar } from '../../../actions/AppStoreActions';\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\nimport { CourseDetails } from '../../../helpers';\nimport { AASection } from '../../../peterportal.types';\nimport AppStore from '../../../stores/AppStore';\nimport ColorPicker from '../../ColorPicker';\n\nconst styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'space-evenly',\n    },\n};\n\ninterface ColorAndDeleteProps {\n    sectionCode: string;\n    color: string;\n    classes: ClassNameMap;\n    term: string;\n}\n\nexport const ColorAndDelete = withStyles(styles)((props: ColorAndDeleteProps) => {\n    const { sectionCode, color, classes, term } = props;\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <TableCell padding=\"none\">\n            <div className={classes.container} style={isMobileScreen ? { flexDirection: 'column' } : {}}>\n                <IconButton\n                    onClick={() => {\n                        deleteCourse(sectionCode, AppStore.getCurrentScheduleIndex(), term);\n                        logAnalytics({\n                            category: analyticsEnum.addedClasses.title,\n                            action: analyticsEnum.addedClasses.actions.DELETE_COURSE,\n                        });\n                    }}\n                >\n                    <Delete fontSize=\"small\" />\n                </IconButton>\n                <ColorPicker\n                    color={color}\n                    isCustomEvent={false}\n                    sectionCode={sectionCode}\n                    term={term}\n                    analyticsCategory={analyticsEnum.addedClasses.title}\n                />\n            </div>\n        </TableCell>\n    );\n});\n\ninterface ScheduleAddCellProps {\n    classes: ClassNameMap;\n    section: AASection;\n    courseDetails: CourseDetails;\n    term: string;\n    scheduleNames: string[];\n}\n\nexport const ScheduleAddCell = withStyles(styles)((props: ScheduleAddCellProps) => {\n    const { classes, section, courseDetails, term, scheduleNames } = props;\n    const popupState = usePopupState({ popupId: 'SectionTableAddCellPopup', variant: 'popover' });\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    const closeAndAddCourse = (scheduleIndex: number, specificSchedule?: boolean) => {\n        popupState.close();\n        for (const meeting of section.meetings) {\n            if (meeting.time === 'TBA') {\n                openSnackbar('success', 'Online/TBA class added');\n                // See Added Classes.\"\n                break;\n            }\n        }\n\n        if (scheduleIndex !== -1) {\n            if (specificSchedule) {\n                logAnalytics({\n                    category: analyticsEnum.classSearch.title,\n                    action: analyticsEnum.classSearch.actions.ADD_SPECIFIC,\n                });\n            }\n            section.color = addCourse(section, courseDetails, term, scheduleIndex);\n        }\n    };\n\n    return (\n        <TableCell padding=\"none\">\n            <div className={classes.container} style={isMobileScreen ? { flexDirection: 'column' } : {}}>\n                <IconButton onClick={() => closeAndAddCourse(AppStore.getCurrentScheduleIndex())}>\n                    <Add fontSize=\"small\" />\n                </IconButton>\n                <IconButton {...bindTrigger(popupState)}>\n                    <ArrowDropDown fontSize=\"small\" />\n                </IconButton>\n                <Menu {...bindMenu(popupState)} onClose={() => closeAndAddCourse(-1)}>\n                    {scheduleNames.map((name, index) => (\n                        <MenuItem key={index} onClick={() => closeAndAddCourse(index, true)}>\n                            Add to {name}\n                        </MenuItem>\n                    ))}\n                    <MenuItem onClick={() => closeAndAddCourse(scheduleNames.length, true)}>\n                        Add to All Schedules\n                    </MenuItem>\n                </Menu>\n            </div>\n        </TableCell>\n    );\n});\n","import { Popover, TableCell, TableRow, Theme,Tooltip, Typography, useMediaQuery } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ClassNameMap, Styles } from '@material-ui/core/styles/withStyles';\nimport classNames from 'classnames';\nimport { bindHover, bindPopover, usePopupState } from 'material-ui-popup-state/hooks';\nimport React, { Fragment, useEffect, useState } from 'react';\n\nimport analyticsEnum, { logAnalytics } from '../../../analytics';\nimport { clickToCopy, CourseDetails, isDarkMode } from '../../../helpers';\nimport { AASection, EnrollmentCount, Meeting } from '../../../peterportal.types';\nimport AppStore from '../../../stores/AppStore';\nimport { getDefaultTerm } from '../../../termData';\nimport OpenSpotAlertPopover, { OpenSpotAlertPopoverProps } from './OpenSpotAlertPopover';\nimport { ColorAndDelete, ScheduleAddCell } from './SectionTableButtons';\nimport locations from './static/locations.json';\nimport restrictionsMapping from './static/restrictionsMapping.json';\n\nconst styles: Styles<Theme, object> = (theme) => ({\n    popover: {\n        pointerEvents: 'none',\n    },\n    sectionCode: {\n        display: 'inline-block',\n        cursor: 'pointer',\n        '&:hover': {\n            color: isDarkMode() ? 'gold' : 'blueviolet',\n            cursor: 'pointer',\n        },\n    },\n    row: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    tr: {\n        '&.addedCourse': {\n            backgroundColor: isDarkMode() ? '#b0b04f' : '#fcfc97',\n        },\n    },\n    cell: {\n        fontSize: '0.85rem',\n    },\n    link: {\n        textDecoration: 'underline',\n        color: isDarkMode() ? 'dodgerblue' : 'blue',\n        cursor: 'pointer',\n    },\n    paper: {\n        padding: theme.spacing(),\n    },\n    button: { padding: '6px' },\n    open: {\n        color: '#00c853',\n    },\n    waitl: {\n        color: '#1c44b2',\n    },\n    full: {\n        color: '#e53935',\n    },\n    Act: { color: '#c87137' },\n    Col: { color: '#ff40b5' },\n    Dis: { color: '#8d63f0' },\n    Fld: { color: '#1ac805' },\n    Lab: { color: '#1abbe9' },\n    Lec: { color: '#d40000' },\n    Qiz: { color: '#8e5c41' },\n    Res: { color: '#ff2466' },\n    Sem: { color: '#2155ff' },\n    Stu: { color: '#179523' },\n    Tap: { color: '#8d2df0' },\n    Tut: { color: '#ffc705' },\n});\n\nconst NoPaddingTableCell = withStyles({\n    sizeSmall: { padding: '0px 0px 0px 0px' },\n})(TableCell);\n\ninterface CourseCodeCellProps {\n    classes: ClassNameMap;\n    sectionCode: string;\n}\n\nconst CourseCodeCell = withStyles(styles)((props: CourseCodeCellProps) => {\n    const { classes, sectionCode } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <Tooltip title=\"Click to copy course code\" placement=\"bottom\" enterDelay={300}>\n                <div\n                    onClick={(event) => {\n                        clickToCopy(event, sectionCode);\n                        logAnalytics({\n                            category: analyticsEnum.classSearch.title,\n                            action: analyticsEnum.classSearch.actions.COPY_COURSE_CODE,\n                        });\n                    }}\n                    className={classes.sectionCode}\n                >\n                    {sectionCode}\n                </div>\n            </Tooltip>\n        </NoPaddingTableCell>\n    );\n});\n\ntype SectionType = 'Act' | 'Col' | 'Dis' | 'Fld' | 'Lab' | 'Lec' | 'Qiz' | 'Res' | 'Sem' | 'Stu' | 'Tap' | 'Tut';\n\ninterface SectionDetailCellProps {\n    classes: ClassNameMap;\n    sectionType: SectionType;\n    sectionNum: string;\n    units: number;\n}\n\nconst SectionDetailsCell = withStyles(styles)((props: SectionDetailCellProps) => {\n    const { classes, sectionType, sectionNum, units } = props;\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <NoPaddingTableCell className={classes.cell} style={isMobileScreen ? { textAlign: 'center' } : {}}>\n            <div className={classes[sectionType]}>{sectionType}</div>\n            <div>\n                {!isMobileScreen && <>Sec: </>}\n                {sectionNum}\n            </div>\n            <div>\n                {!isMobileScreen && <>Units: </>}\n                {units}\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\ninterface InstructorsCellProps {\n    classes: ClassNameMap;\n    instructors: string[];\n}\n\nconst InstructorsCell = withStyles(styles)((props: InstructorsCellProps) => {\n    const { classes, instructors } = props;\n\n    const getLinks = (professorNames: string[]) => {\n        return professorNames.map((profName) => {\n            if (profName !== 'STAFF') {\n                const lastName = profName.substring(0, profName.indexOf(','));\n                return (\n                    <div key={profName}>\n                        <a\n                            href={`https://www.ratemyprofessors.com/search/teachers?sid=U2Nob29sLTEwNzQ=&query=${lastName}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {profName}\n                        </a>\n                    </div>\n                );\n            } else {\n                return profName;\n            }\n        });\n    };\n\n    return <NoPaddingTableCell className={classes.cell}>{getLinks(instructors)}</NoPaddingTableCell>;\n});\n\ninterface LocationsCellProps {\n    classes: ClassNameMap;\n    meetings: Meeting[];\n}\n\nconst LocationsCell = withStyles(styles)((props: LocationsCellProps) => {\n    const { classes, meetings } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            {meetings.map((meeting) => {\n                return meeting.bldg !== 'TBA' ? (\n                    <Fragment key={meeting.days + meeting.time + meeting.bldg}>\n                        <a\n                            href={((): string => {\n                                const location_id = locations[meeting.bldg.split(' ')[0] as keyof typeof locations];\n                                if (location_id !== undefined) \n                                    return `https://map.uci.edu/?id=463#!m/${location_id}`;\n                                else \n                                    return 'https://map.uci.edu/?id=463#!ct/12035,12033,11888,0,12034';\n                            })()}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {meeting.bldg}\n                        </a>\n                        <br />\n                    </Fragment>\n                ) : (\n                    <div>{meeting.bldg}</div>\n                );\n            })}\n        </NoPaddingTableCell>\n    );\n});\n\ninterface SectionEnrollmentCellProps {\n    classes: ClassNameMap;\n    numCurrentlyEnrolled: EnrollmentCount;\n    maxCapacity: number;\n    /** This is a string because sometimes it's \"n/a\" */\n    numOnWaitlist: string;\n    /** This is a string because numOnWaitlist is a string. I haven't seen this be \"n/a\" but it seems possible and I don't want it to break if that happens. */\n    numNewOnlyReserved: string;\n}\n\nconst SectionEnrollmentCell = withStyles(styles)((props: SectionEnrollmentCellProps) => {\n    const { classes, numCurrentlyEnrolled, maxCapacity, numOnWaitlist, numNewOnlyReserved } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <div>\n                <div>\n                    <strong>\n                        {numCurrentlyEnrolled.totalEnrolled} / {maxCapacity}\n                    </strong>\n                </div>\n                {numOnWaitlist !== '' && <div>WL: {numOnWaitlist}</div>}\n                {numNewOnlyReserved !== '' && <div>NOR: {numNewOnlyReserved}</div>}\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\ninterface RestrictionsCellProps {\n    classes: ClassNameMap;\n    restrictions: string;\n}\n\nconst RestrictionsCell = withStyles(styles)((props: RestrictionsCellProps) => {\n    const { classes, restrictions } = props;\n    const popupState = usePopupState({ popupId: 'RestrictionsCellPopup', variant: 'popover' });\n\n    const parseRestrictions = (restrictionCode: string) => {\n        return restrictionCode.split(' ').map((code, index) => {\n            if (code !== 'and' && code !== 'or') {\n                return (\n                    <Fragment key={index}>\n                        {restrictionsMapping[code as keyof typeof restrictionsMapping]}\n                        <br />\n                    </Fragment>\n                );\n            }\n            return null;\n        });\n    };\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            <div>\n                <Typography {...bindHover(popupState)}>\n                    <a\n                        href=\"https://www.reg.uci.edu/enrollment/restrict_codes.html\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {restrictions}\n                    </a>\n                </Typography>\n                <Popover\n                    {...bindPopover(popupState)}\n                    className={classes.popover}\n                    classes={{ paper: classes.paper }}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n                    transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n                    disableRestoreFocus\n                >\n                    <Typography>{parseRestrictions(restrictions)}</Typography>\n                </Popover>\n            </div>\n        </NoPaddingTableCell>\n    );\n});\n\ninterface DayAndTimeCellProps {\n    classes: ClassNameMap;\n    meetings: Meeting[];\n}\n\nconst DayAndTimeCell = withStyles(styles)((props: DayAndTimeCellProps) => {\n    const { classes, meetings } = props;\n\n    return (\n        <NoPaddingTableCell className={classes.cell}>\n            {meetings.map((meeting) => {\n                const timeString = meeting.time.replace(/\\s/g, '').split('-').join(' - ');\n                return <div key={meeting.days + meeting.time + meeting.bldg}>{`${meeting.days} ${timeString}`}</div>;\n            })}\n        </NoPaddingTableCell>\n    );\n});\n\ninterface StatusCellProps extends OpenSpotAlertPopoverProps {\n    term: string;\n}\n\nconst StatusCell = withStyles(styles)((props: StatusCellProps) => {\n    const { term, sectionCode, courseTitle, courseNumber, status, classes } = props;\n\n    if (term === getDefaultTerm().shortName && (status === 'NewOnly' || status === 'FULL')) {\n        return (\n            <NoPaddingTableCell className={`${classes[status.toLowerCase()]} ${classes.cell}`}>\n                <OpenSpotAlertPopover\n                    courseTitle={courseTitle}\n                    courseNumber={courseNumber}\n                    status={status}\n                    sectionCode={sectionCode}\n                />\n            </NoPaddingTableCell>\n        );\n    } else {\n        return (\n            <NoPaddingTableCell className={`${classes[status.toLowerCase()]} ${classes.cell}`}>\n                {status}\n            </NoPaddingTableCell>\n        );\n    }\n});\n\ninterface SectionTableBodyProps {\n    classes: ClassNameMap;\n    section: AASection;\n    courseDetails: CourseDetails;\n    term: string;\n    colorAndDelete: boolean;\n    highlightAdded: boolean;\n    scheduleNames: string[];\n}\n\n//TODO: SectionNum name parity -> SectionNumber\nconst SectionTableBody = withStyles(styles)((props: SectionTableBodyProps) => {\n    const { classes, section, courseDetails, term, colorAndDelete, highlightAdded, scheduleNames } = props;\n    const [addedCourse, setAddedCourse] = useState(colorAndDelete);\n    useEffect(() => {\n        const toggleHighlight = () => {\n            const doAdd = AppStore.getAddedSectionCodes()[AppStore.getCurrentScheduleIndex()].has(\n                `${section.sectionCode} ${term}`\n            );\n            setAddedCourse(doAdd);\n        };\n\n        toggleHighlight();\n        AppStore.on('addedCoursesChange', toggleHighlight);\n        AppStore.on('currentScheduleIndexChange', toggleHighlight);\n\n        return () => {\n            AppStore.removeListener('addedCoursesChange', toggleHighlight);\n            AppStore.removeListener('currentScheduleIndexChange', toggleHighlight);\n        };\n    }, [section.sectionCode, term]); //should only run once on first render since these shouldn't change.\n\n    return (\n        <TableRow\n            classes={{ root: classes.row }}\n            className={classNames(classes.tr, { addedCourse: addedCourse && highlightAdded })}\n        >\n            {!addedCourse ? (\n                <ScheduleAddCell\n                    section={section}\n                    courseDetails={courseDetails}\n                    term={term}\n                    scheduleNames={scheduleNames}\n                />\n            ) : (\n                <ColorAndDelete color={section.color} sectionCode={section.sectionCode} term={term} />\n            )}\n            <CourseCodeCell sectionCode={section.sectionCode} />\n            <SectionDetailsCell\n                sectionType={section.sectionType as SectionType}\n                sectionNum={section.sectionNum}\n                units={parseInt(section.units)}\n            />\n            <InstructorsCell instructors={section.instructors} />\n            <DayAndTimeCell meetings={section.meetings} />\n            <LocationsCell meetings={section.meetings} />\n            <SectionEnrollmentCell\n                numCurrentlyEnrolled={section.numCurrentlyEnrolled}\n                maxCapacity={parseInt(section.maxCapacity)}\n                numOnWaitlist={section.numOnWaitlist}\n                numNewOnlyReserved={section.numNewOnlyReserved}\n            />\n            <RestrictionsCell restrictions={section.restrictions} />\n            <StatusCell\n                term={term}\n                status={section.status}\n                sectionCode={section.sectionCode}\n                courseTitle={courseDetails.courseTitle}\n                courseNumber={courseDetails.courseNumber}\n            />\n        </TableRow>\n    );\n});\n\nexport default withStyles(styles)(SectionTableBody);\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Tooltip,\n    Typography,\n    useMediaQuery,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Assessment, Assignment, Help, RateReview } from '@material-ui/icons';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport React from 'react';\n\nimport analyticsEnum from '../../../analytics';\n// import AlmanacGraph from '../EnrollmentGraph/EnrollmentGraph'; uncomment when we get past enrollment data back and restore the files (https://github.com/icssc/AntAlmanac/tree/5e89e035e66f00608042871d43730ba785f756b0/src/components/RightPane/SectionTable/EnrollmentGraph)\nimport CourseInfoBar from './CourseInfoBar';\nimport CourseInfoButton from './CourseInfoButton';\nimport GradesPopup from './GradesPopup';\nimport { SectionTableProps } from './SectionTable.types';\nimport SectionTableBody from './SectionTableBody';\n\nconst styles = {\n    flex: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    iconMargin: {\n        marginRight: '4px',\n    },\n    cellPadding: {\n        padding: '0px 0px 0px 0px',\n    },\n    row: {\n        '&:nth-child(1)': {\n            width: '8%',\n        },\n        '&:nth-child(2)': {\n            width: '8%',\n        },\n        '&:nth-child(3)': {\n            width: '8%',\n        },\n        '&:nth-child(4)': {\n            width: '15%',\n        },\n        '&:nth-child(5)': {\n            width: '12%',\n        },\n        '&:nth-child(6)': {\n            width: '10%',\n        },\n        '&:nth-child(7)': {\n            width: '10%',\n        },\n        '&:nth-child(8)': {\n            width: '8%',\n        },\n        '&:nth-child(9)': {\n            width: '8%',\n        },\n    },\n};\n\nconst SectionTable = (props: SectionTableProps) => {\n    const { classes, courseDetails, term, colorAndDelete, highlightAdded, scheduleNames, analyticsCategory } = props;\n    const courseId = courseDetails.deptCode.replaceAll(' ', '') + courseDetails.courseNumber;\n    const encodedDept = encodeURIComponent(courseDetails.deptCode);\n    const isMobileScreen = useMediaQuery('(max-width: 750px)');\n\n    return (\n        <>\n            <div\n                style={{\n                    display: 'inline-flex',\n                    gap: '4px',\n                    marginTop: '4px',\n                }}\n            >\n                <CourseInfoBar\n                    deptCode={courseDetails.deptCode}\n                    courseTitle={courseDetails.courseTitle}\n                    courseNumber={courseDetails.courseNumber}\n                    analyticsCategory={analyticsCategory}\n                />\n\n                {/* Temporarily remove \"Past Enrollment\" until data on PeterPortal API */}\n                {/* <AlmanacGraph courseDetails={courseDetails} />  */}\n\n                {courseDetails.prerequisiteLink && (\n                    <CourseInfoButton\n                        analyticsCategory={analyticsCategory}\n                        analyticsAction={analyticsEnum.classSearch.actions.CLICK_PREREQUISITES}\n                        text={isMobileScreen ? 'Prereqs' : 'Prerequisites'}\n                        icon={<Assignment />}\n                        redirectLink={courseDetails.prerequisiteLink}\n                    />\n                )}\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_REVIEWS}\n                    text=\"Reviews\"\n                    icon={<RateReview />}\n                    redirectLink={`https://peterportal.org/course/${courseId}`}\n                />\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_ZOTISTICS}\n                    text=\"Zotistics\"\n                    icon={<Assessment />}\n                    popupContent={\n                        <GradesPopup\n                            deptCode={courseDetails.deptCode}\n                            courseNumber={courseDetails.courseNumber}\n                            isMobileScreen={isMobileScreen}\n                        />\n                    }\n                />\n\n                <CourseInfoButton\n                    analyticsCategory={analyticsCategory}\n                    analyticsAction={analyticsEnum.classSearch.actions.CLICK_PAST_ENROLLMENT}\n                    text=\"Past Enrollment\"\n                    icon={<ShowChartIcon />}\n                    redirectLink={`https://zot-tracker.herokuapp.com/?dept=${encodedDept}&number=${courseDetails.courseNumber}&courseType=all`}\n                />\n            </div>\n\n            <TableContainer component={Paper} style={{ margin: '8px 0px 8px 0px' }} elevation={0} variant=\"outlined\">\n                <Table className={classes?.table} size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row} />\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Code\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Type\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Instructors\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Times\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Places\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                <div className={classes?.flex}>\n                                    <span className={classes?.iconMargin}>Enrollment</span>\n                                    {!isMobileScreen && (\n                                        <Tooltip\n                                            title={\n                                                <Typography>\n                                                    Enrolled/Capacity\n                                                    <br />\n                                                    Waitlist\n                                                    <br />\n                                                    New-Only Reserved\n                                                </Typography>\n                                            }\n                                        >\n                                            <Help fontSize=\"small\" />\n                                        </Tooltip>\n                                    )}\n                                </div>\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Rstr\n                            </TableCell>\n                            <TableCell classes={{ sizeSmall: classes?.cellPadding }} className={classes?.row}>\n                                Status\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {courseDetails.sections.map((section) => {\n                            return (\n                                <SectionTableBody\n                                    key={section.sectionCode}\n                                    section={section}\n                                    courseDetails={courseDetails}\n                                    term={term}\n                                    colorAndDelete={colorAndDelete}\n                                    highlightAdded={highlightAdded}\n                                    scheduleNames={scheduleNames}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nexport default withStyles(styles)(SectionTable);\n"],"names":["noCourseInfo","title","prerequisite_text","prerequisite_for","description","ge_list","withStyles","rightSpace","marginRight","button","backgroundColor","boxShadow","courseInfoPane","margin","maxWidth","skeleton","width","height","props","courseTitle","courseNumber","deptCode","classes","analyticsCategory","useState","anchorEl","setAnchorEl","courseInfo","setCourseInfo","togglePopover","currentTarget","courseId","encodeURIComponent","replace","fetch","PETERPORTAL_REST_ENDPOINT","response","ok","json","jsonResp","join","isMobileScreen","useMediaQuery","Button","variant","startIcon","InfoOutlined","size","onClick","event","logAnalytics","category","action","analyticsEnum","Popover","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","className","Skeleton","animation","getPopoverContent","color","text","icon","redirectLink","popupContent","analyticsAction","popupAnchor","setPopupAnchor","window","gpaTitle","marginTop","textAlign","fontWeight","fontSize","marginLeft","padding","loading","setLoading","graphTitle","setGraphTitle","gradeData","setGradeData","loadGrades","queryGrades","courseGrades","data","Object","entries","key","value","push","name","split","toUpperCase","all","average_gpa","toFixed","console","log","encodedDept","axisColor","isDarkMode","style","strokeDasharray","dataKey","tick","fill","href","target","rel","phoneNumberRegex","RegExp","OpenSpotAlertPopover","state","anchorElement","phoneNumber","localStorage","getItem","invalidInput","invalidInputMessage","handlePhoneNumberChange","setState","registerForAlerts","params","sectionCode","test","REGISTER_NOTIFICATIONS_ENDPOINT","method","headers","body","JSON","stringify","status","setItem","openSnackbar","prevProps","prevState","this","RightPaneStore","container","Typography","maskChar","mask","onChange","TextField","label","type","buttonContainer","PureComponent","theme","spacing","display","justifyContent","styles","ColorAndDelete","term","TableCell","flexDirection","IconButton","deleteCourse","AppStore","Delete","ColorPicker","isCustomEvent","ScheduleAddCell","section","courseDetails","scheduleNames","popupState","usePopupState","popupId","closeAndAddCourse","scheduleIndex","specificSchedule","close","meetings","time","addCourse","Add","bindTrigger","ArrowDropDown","Menu","bindMenu","map","index","MenuItem","length","popover","pointerEvents","cursor","row","palette","hover","tr","cell","link","textDecoration","paper","waitl","full","Act","Col","Dis","Fld","Lab","Lec","Qiz","Res","Sem","Stu","Tap","Tut","NoPaddingTableCell","sizeSmall","CourseCodeCell","Tooltip","placement","enterDelay","clickToCopy","SectionDetailsCell","sectionType","sectionNum","units","InstructorsCell","professorNames","instructors","profName","lastName","substring","indexOf","LocationsCell","meeting","bldg","Fragment","location_id","locations","undefined","days","SectionEnrollmentCell","numCurrentlyEnrolled","maxCapacity","numOnWaitlist","numNewOnlyReserved","totalEnrolled","RestrictionsCell","restrictionCode","restrictions","bindHover","bindPopover","disableRestoreFocus","code","restrictionsMapping","DayAndTimeCell","timeString","StatusCell","getDefaultTerm","shortName","toLowerCase","SectionTableBody","colorAndDelete","highlightAdded","addedCourse","setAddedCourse","useEffect","toggleHighlight","doAdd","has","TableRow","root","classNames","parseInt","flex","alignItems","iconMargin","cellPadding","replaceAll","gap","prerequisiteLink","Assignment","RateReview","Assessment","ShowChart","TableContainer","component","Paper","elevation","Table","table","TableHead","Help","TableBody","sections"],"sourceRoot":""}